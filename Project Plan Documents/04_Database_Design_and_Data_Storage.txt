# 00\_Primary\_Database\_Schema\_and\_Data\_Flow\_Plan

Execution Mandate: ChatGPT acts as the lead programmer & auditor for this phase of the project. These guidelines provide the initial structure and direction, but the system should remain flexible to adapt as the project evolves. Prioritize accuracy and long-term maintainability, and proactively identify opportunities for optimization without losing sight of the overall project goals.

> **Context Anchor:**
> This file defines the supporting knowledge layer for a natural language processing system. The database serves as a **context provider**, not a standalone query engine.
> The LLM must **always** verify responses against this data and provide **reasoning** for its conclusions.
> Assume the LLM is the **primary** reasoning engine, but the database is the **final** authority for technical accuracy.
> Responses should be weighted based on **relevance** and **confidence**, with a clear explanation of logic where possible.

## üóÇÔ∏è Core Database Schema (Initial Build)

### **Tables Overview**

* **JSON\_Files** - Stores the core technical documentation extracted from the Cabinet Vision help files.
* **Images** - Stores image metadata and descriptions extracted via OpenAI Vision.
* **Forum\_Threads** - Stores parsed forum data, including thread titles, messages, timestamps, and metadata.
* **UCS\_Scripts** - Stores extracted UCS scripts, including parameters and function names.
* **Cross\_References** - Stores the relationships between different data types, including HTM files, UCS scripts, and forum threads.

---

### **HTM\_Files Table**

| Field        | Type       | Description                                               |
| ------------ | ---------- | --------------------------------------------------------- |
| HTM\_ID      | UUID       | Unique identifier for each JSON file                      |
| FilePath     | Text       | Full file path to the generated JSON file                 |
| FileName     | Text       | Original JSON filename                                    |
| Content      | JSON       | Extracted structured content from the HTM file            |
| ContextTags  | Text Array | Extracted keywords for indexing                           |
| Source\_Type | Text       | Indicates the data source (e.g., help\_file, user\_forum) |
| CreatedAt    | Timestamp  | Date and time the JSON file was ingested                  |
| UpdatedAt    | Timestamp  | Date and time the JSON file was last modified             |

### **Images Table**

| Field         | Type       | Description                                               |
| ------------- | ---------- | --------------------------------------------------------- |
| Image\_ID     | UUID       | Unique identifier for each image                          |
| FilePath      | Text       | Full file path to the original image                      |
| FileName      | Text       | Original image filename                                   |
| FileExtension | Text       | File extension (e.g., PNG, JPG)                           |
| Description   | Text       | AI-generated text description of the image                |
| ContextTags   | Text Array | Keywords extracted from the image and surrounding text    |
| CreatedAt     | Timestamp  | Date and time the image was processed                     |
| UpdatedAt     | Timestamp  | Date and time the image metadata was last modified        |
| Source\_Type  | Text       | Indicates the data source (e.g., help\_file, user\_forum) |

### **UCS\_Scripts Table**

| Field        | Type       | Description                                               |
| ------------ | ---------- | --------------------------------------------------------- |
| UCS\_ID      | UUID       | Unique identifier for each UCS script                     |
| FilePath     | Text       | Full file path to the original script                     |
| FileName     | Text       | Original script filename                                  |
| ScriptBody   | Text       | Full script content, including comments                   |
| Parameters   | Text Array | Extracted parameters and function names                   |
| ContextTags  | Text Array | Extracted keywords for indexing                           |
| Source\_Type | Text       | Indicates the data source (e.g., help\_file, user\_forum) |
| CreatedAt    | Timestamp  | Date and time the script was ingested                     |
| UpdatedAt    | Timestamp  | Date and time the script was last modified                |

### **Parameter\_Tables Table**

| Field         | Type       | Description                                                     |
| ------------- | ---------- | --------------------------------------------------------------- |
| Parameter\_ID | UUID       | Unique identifier for each parameter table                      |
| TableName     | Text       | Name of the parameter table (e.g., System Parameters, CADLinks) |
| Headers       | Text Array | Column headers for the parameter table                          |
| Rows          | JSON       | Parameter table rows, including field names and descriptions    |
| ContextTags   | Text Array | Extracted keywords for indexing                                 |
| Source\_Type  | Text       | Indicates the data source (e.g., help\_file, user\_forum)       |
| CreatedAt     | Timestamp  | Date and time the parameter table was ingested                  |
| UpdatedAt     | Timestamp  | Date and time the parameter table was last modified             |

### **Cross\_References Table**

| Field              | Type       | Description                                                                 |
| ------------------ | ---------- | --------------------------------------------------------------------------- |
| Reference\_ID      | UUID       | Unique identifier for each relationship                                     |
| Source\_ID         | UUID       | The ID of the primary record (e.g., HTM\_ID, UCS\_ID, Parameter\_ID)        |
| Target\_ID         | UUID       | The ID of the related record (e.g., Image\_ID, Thread\_ID, Parameter\_ID)   |
| RelationshipType   | Text       | Type of relationship (e.g., Image Reference, Forum Example, Parameter Link) |
| ContextTags        | Text Array | Extracted keywords for indexing                                             |
| ConfidenceScore    | Decimal    | AI-assigned confidence rating for the relationship (0.0 - 1.0)              |
| VerificationStatus | Text       | Status of the entry (e.g., Verified, Needs Review, Unconfirmed)             |
| Source\_Type       | Text       | Indicates the data source (e.g., help\_file, user\_forum)                   |
| CreatedAt          | Timestamp  | Date and time the relationship was created                                  |
| UpdatedAt          | Timestamp  | Date and time the relationship was last modified                            |

---

## üìÖ Data Flow Plan (Phases 1-4)

### **Phase 1: Data Extraction and Preparation (Complete)**

1. Extract the compiled help files (CHM) from the software install directories, maintaining their original file structure. Extract to a project folder for consistent processing.
2. Generate a master image index file, capturing all images extracted from the help files. This index should be used as the authoritative reference for image deduplication and cross-referencing.
3. Run the image verification script to compare extracted images against the master index, generating reports for matched, orphaned, and missing images.
4. Convert HTM files to structured JSON, preserving inline images, links, tables, and parameter data for database import.
5. Store the generated JSON files in the HTM\_Files table, including context tags for improved search accuracy.

### **Phase 2: Database Setup and Initial Imports**

1. Set up the primary PostgreSQL database for structured data, including HTM\_Files, UCS\_Scripts, Parameter\_Tables, Cross\_References, and Forum\_Threads.
2. Initialize a ChromaDB vector store for unstructured data, including ContextTags and semantic embeddings.
3. Implement the UUID mapping layer to bridge the relational PostgreSQL database with the ChromaDB vector store.
4. Run the initial data imports to populate the core tables with the processed JSON files.
5. Validate the initial database setup with sample data imports.
6. Test basic query performance and cross-database linking to ensure accurate context retrieval.

### **Phase 3: Image Processing and Ingestion**

1. Extract parameter tables with structured field names, descriptions, valid ranges, and contexts.
2. Generate AI-driven text descriptions for each image, including context tags for more precise search.
3. Populate the Images and Parameter\_Tables tables with processed metadata.
4. Generate cross-references between parameters, images, and parent JSON files.

### **Phase 4: Cross-Referencing and Optimization**

1. Use UUIDs to establish relationships between JSON files, images, parameters, and forum threads.
2. Implement automated cross-referencing for improved search accuracy and relevance.
3. Validate all cross-references against the UUID map to prevent broken links.
4. Test database performance and adjust indexing as needed.
5. Optimize ChromaDB embeddings for faster context-aware search.
6. Continuously refine the data schema as new data sources are added.

---

## üìÖ Next Steps

1. **Database Initialization:**

   * Build the actual PostgreSQL and ChromaDB instances.
   * Run initial table creation scripts based on the defined schema.

2. **Initial Data Import:**

   * Import the generated JSON files to populate the core tables.
   * Validate initial data consistency and UUID integrity.

3. **Early Testing and Optimization:**

   * Run basic search and cross-reference tests.
   * Identify early performance bottlenecks for tuning.

4. **Image Pipeline Preparation:**

   * Start building out the image processing pipeline, including AI description generation.
   * Prepare for cross-referencing with JSON files.

5. **Schema Refinement:**

   * Continuously refine the data schema as new data sources are added.
